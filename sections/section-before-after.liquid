{%- liquid
  assign start_position = section.settings.start_position

  assign inset_prop = 'inset(0px 0px 0px var(--progress))'
  if section.settings.orientation == 'vertical'
    assign inset_prop = 'inset(var(--progress) 0px 0px)'
  endif

  assign transform_axis = 'translateX'
  if section.settings.orientation == 'vertical'
    assign transform_axis = 'translateY'
  endif
-%}

<div
  data-section-type="before-after"
  data-section-id="{{ section.id }}"
  style="
    --PT: {{ section.settings.padding_top }}px;
    --PB: {{ section.settings.padding_bottom }}px;
    --handle-color:{{ section.settings.handle_color }};
    --thumb-size: 45px;
  "
>
  <div class="{{ section.settings.width }} section-padding">
    <div
      class="relative flex items-center justify-center overflow-hidden"
      {% comment %}
        Animation notes: Motion-one animation controls have two styles for interrupting animations:
        - animation.stop() - stops the animation at the scroll, writing inset(0% 0% 0% 42%) if scroll position is 42%
        - animation.cancel() - stops the animation and reverts to previous styles, reverting to inset(0% 0% 0% var(--progress))
        Cancel would have been perfect for our use case, but the scroll function does not return the full set of animation controls.
        When a scroll animation is created, it returns a function. This function can only call the stop function, not the cancel function.
        This is why we overwrite the motion-one style with alpine, by using $watch on the dirty variable.
      {% endcomment %}
      x-data="
        {
          progress: Number({{ section.settings.start_position }}),
          isVertical: ('{{ section.settings.orientation }}' === 'vertical') ? true : false,
          offset: 15,
          dirty: false,
          imgScrollAnimation: null,
          handleScrollAnimation: null,
          init() {
             // Start animations on load
            this.startAnimations()
            this.$watch('dirty', (dirty) => {
              if (dirty) return
              // restart animations when image leaves the scroll window
              this.startAnimations()
            });
          },
          formatPercent(input) {
            return new Intl.NumberFormat('default', {
              style: 'percent',
              minimumFractionDigits: 2,
              maximumFractionDigits: 2
            }).format(input / 100)
          },

          clipAnimationString(prog, offset) {
            const start = this.formatPercent(prog - offset)
            const finish = this.formatPercent(prog + offset)
            return [this.insetSettingString(start), this.insetSettingString(finish)]
          },
          insetSettingString(percentFormatted) {
            return this.isVertical ? `inset(${percentFormatted} 0% 0% 0%)` : `inset(0% 0% 0% ${percentFormatted})`
          },
          startAnimations() {
            // TODO: pass in progress
            this.imgScrollAnimation =
            $m1.scroll(
              $m1.animate(
                $refs.image,
                { clipPath: this.clipAnimationString(this.progress, this.offset) }
              ),
              { target: $refs.image, offset: ['end start', 'start end'] }
            )

            this.handleScrollAnimation =
            $m1.scroll(
              $m1.animate(
                $refs.handle,
                { {{ transform_axis }}: [this.formatPercent((this.progress - this.offset)), this.formatPercent((this.progress + this.offset))] }
              ),
              { target: $refs.image, offset: ['end start', 'start end'] }
            )
          },
          handleInput() {
            if (this.dirty) return
            // $m1.scroll() returns a function, calling it stops the animation and clears listeners
            this.imgScrollAnimation()
            this.handleScrollAnimation()
            // Set dirty after animation is cleared
            // Above we use $watch to restart animations after the image leaves the scroll window
            this.dirty = true
          }
        }
      "
      x-intersect="dirty = false"
      :style="
        {
          '--progress':formatPercent(progress)
        }
      "
    >
      <input
        x-model.number="progress"
        @pointerdown="handleInput"
        @keydown="handleInput"
        type="range"
        min="0.0"
        max="100.0"
        class="
          absolute z-40
          h-full w-full
          !p-0
          opacity-0
          [&::-moz-range-thumb]:rounded-none
          [&::-webkit-slider-thumb]:rounded-none

          {% if section.settings.orientation == 'vertical' %}
            cursor-row-resize
            [writing-mode:vertical-lr]
            [&::-moz-range-thumb]:h-[--thumb-size]
            [&::-webkit-slider-thumb]:h-[--thumb-size]
            [&::-moz-range-thumb]:w-[100vw]
            [&::-webkit-slider-thumb]:w-[100vw]
          {% else %}
            cursor-col-resize
            [&::-moz-range-thumb]:h-[100vh]
            [&::-webkit-slider-thumb]:h-[100vh]
            [&::-moz-range-thumb]:w-[--thumb-size]
            [&::-webkit-slider-thumb]:w-[--thumb-size]
          {% endif %}
        "
      >

      {% comment %} TODO: handle vertical case, line should end and restart before circle, add icons, add circle border, make icons lightly follow mouse {% endcomment %}
      <div
        x-ref="handle"
        class="absolute z-30 h-full w-full"
        :style=" dirty ? { 'transform': '{{ transform_axis }}(var(--progress))' } : {}"
      >
        <div
          class="
            flex items-center
            {% if section.settings.orientation == 'vertical' %}
              h-0 w-full
            {% else %}
              w-0 h-full
            {% endif %}
          "
        >
          <!-- Vertical line -->
          <div
            class="
              absolute start-[-1.5px] bg-[--handle-color]
              {% if section.settings.orientation == 'vertical' %}
                h-[1.5px] w-full
              {%- else -%}
                w-[1.5px] h-full
              {% endif %}
            "
          ></div>

          <!-- White circle with blur -->
          <div
            class="
              absolute h-[--thumb-size] w-[--thumb-size] rounded-full border-[1.5px] border-[--handle-color] bg-white/10 backdrop-blur
              {% if section.settings.orientation == 'vertical' %}
                start-[calc(50%+(var(--thumb-size)/-2))] rotate-90
              {%- else -%}
                start-[calc(var(--thumb-size)/-2)]
              {% endif %}
            "
          >
            <div class="flex h-full items-center justify-center">
              <div class="text-r5 text-[--handle-color]">
                {% render 'icon-core-chevron-left' %}
              </div>
              <div class="text-r5 text-[--handle-color]">
                {% render 'icon-core-chevron-right' %}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div
        x-ref="image"
        class="!absolute inset-0 z-20 w-full bg-canvas"
        :style="dirty ? { 'clip-path': '{{ inset_prop }}' } : {}"
      >
        {% render 'image', cover: true, placeholder: 'collection-3', img_object: section.settings.before_image %}
      </div>


      {%- assign container_wh_ratio = section.settings.after_image.aspect_ratio | default: 2.0 -%}
      <div class="relative z-10 w-full ">
        {% render 'image', placeholder: 'collection-4', wh_ratio: container_wh_ratio, img_object: section.settings.after_image %}
      </div>

    </div>
  </div>
</div>

{% schema %}
{
  "name": "Before / After",
  "settings": [
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before Image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After Image"
    },
    {
      "type": "select",
      "id": "orientation",
      "label": "Orientation",
      "default": "horizontal",
      "options": [
        {"value": "horizontal", "label": "Horizontal"},
        {"value": "vertical", "label": "Vertical"}
      ]
    },
    {
      "type": "color",
      "id": "handle_color",
      "label": "Handle color",
      "default": "#FFFFFF"
    },
    {
      "type": "range",
      "id": "start_position",
      "min": 0,
      "max": 100,
      "step": 1,
      "unit": "%",
      "label": "Start position",
      "default": 50
    },
    {
      "type": "header",
      "content": "Section spacing"
    },
    {
      "type": "select",
      "id": "width",
      "label": "Width",
      "default": "wrapper",
      "options": [
        {"value": "wrapper--none", "label": "Full width"},
        {"value": "wrapper--full", "label": "Full width padded"},
        {"value": "wrapper", "label": "Page width"},
        {"value": "wrapper--narrow", "label": "Page width narrow"},
        {"value": "wrapper--tiny", "label": "Page width extra narrow"}
      ]
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 180,
      "step": 2,
      "unit": "px",
      "label": "Padding top",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 180,
      "step": 2,
      "unit": "px",
      "label": "Padding bottom",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "Before/After",
      "category": "Image"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer", "aside"]
  }
}
{% endschema %}
